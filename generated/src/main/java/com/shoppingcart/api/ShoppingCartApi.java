/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.shoppingcart.api;

import com.shoppingcart.model.InvoiceItem;
import com.shoppingcart.model.ShoppingCartItem;
import com.shoppingcart.model.ShoppingCartItemRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "shopping-cart", description = "the shopping-cart API")
public interface ShoppingCartApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /shopping-cart/{userId}/buy : Pagar carrito de compras de usuario
     * Eliminar carrito de compra por id de usuario
     *
     * @param userId  (required)
     * @return search results matching criteria (status code 200)
     */
    @Operation(
        operationId = "buyShoppingCart",
        summary = "Pagar carrito de compras de usuario",
        description = "Eliminar carrito de compra por id de usuario",
        responses = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InvoiceItem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/shopping-cart/{userId}/buy",
        produces = { "application/json" }
    )
    
    default ResponseEntity<InvoiceItem> buyShoppingCart(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalTax\" : 10, \"datetime\" : \"2024-03-16T15:28:42.183Z\", \"total\" : 10, \"subtotal\" : 10, \"businessId\" : \"B123456\", \"businessName\" : \"tienda s.l.\", \"taxDescription\" : \"IVA\", \"tax\" : 0.21, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"products\" : [ { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" }, { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /shopping-cart/{userId} : Borrar carrito de compras de usuario
     * Eliminar carrito de compra por id de usuario
     *
     * @param userId  (required)
     * @return delete shopping cart (status code 200)
     *         or bad input parameter (status code 400)
     */
    @Operation(
        operationId = "deleteShoppingCartByUserId",
        summary = "Borrar carrito de compras de usuario",
        description = "Eliminar carrito de compra por id de usuario",
        responses = {
            @ApiResponse(responseCode = "200", description = "delete shopping cart"),
            @ApiResponse(responseCode = "400", description = "bad input parameter")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/shopping-cart/{userId}"
    )
    
    default ResponseEntity<Void> deleteShoppingCartByUserId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /shopping-cart : Buscar carritos de compras
     * Devolver todos los carritos de compra
     *
     * @return search results matching criteria (status code 200)
     *         or bad input parameter (status code 400)
     */
    @Operation(
        operationId = "getAllShoppingCarts",
        summary = "Buscar carritos de compras",
        description = "Devolver todos los carritos de compra",
        responses = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ShoppingCartItem.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad input parameter")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shopping-cart",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ShoppingCartItem>> getAllShoppingCarts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"subtotal\" : 10, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"products\" : [ { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" }, { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" } ] }, { \"subtotal\" : 10, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"products\" : [ { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" }, { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /shopping-cart/{userId} : Buscar carrito de compras de usuario
     * Buscar carrito de compra por id de usuario
     *
     * @param userId  (required)
     * @return search results matching criteria (status code 200)
     *         or bad input parameter (status code 400)
     */
    @Operation(
        operationId = "getShoppingCartByUserId",
        summary = "Buscar carrito de compras de usuario",
        description = "Buscar carrito de compra por id de usuario",
        responses = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShoppingCartItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad input parameter")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shopping-cart/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ShoppingCartItem> getShoppingCartByUserId(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subtotal\" : 10, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"products\" : [ { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" }, { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /shopping-cart/{userId} : Agregar al carrito de compra
     * Agregar datos al carrito de compras
     *
     * @param userId  (required)
     * @param shoppingCartItemRequest Inventory item to add (optional)
     * @return search results matching criteria (status code 200)
     *         or bad input parameter (status code 400)
     */
    @Operation(
        operationId = "saveShoppingCart",
        summary = "Agregar al carrito de compra",
        description = "Agregar datos al carrito de compras",
        responses = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShoppingCartItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad input parameter")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/shopping-cart/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ShoppingCartItem> saveShoppingCart(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "ShoppingCartItemRequest", description = "Inventory item to add") @Valid @RequestBody(required = false) ShoppingCartItemRequest shoppingCartItemRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subtotal\" : 10, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"products\" : [ { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" }, { \"quantity\" : 1, \"price\" : 10, \"subtotal\" : 10, \"name\" : \"producto 1\", \"description\" : \"description 1\", \"id\" : 1, \"galleries\" : [ \"galleries\", \"galleries\" ], \"category\" : \"category 1\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
